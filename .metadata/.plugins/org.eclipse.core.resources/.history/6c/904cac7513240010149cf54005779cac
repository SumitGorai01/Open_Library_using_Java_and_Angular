package com.project.openlibrary.controller;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.project.openlibrary.entity.Author;
import com.project.openlibrary.entity.Book;
import com.project.openlibrary.service.AuthorService;
import com.project.openlibrary.service.BookService;

@RestController
@RequestMapping("/book")
@CrossOrigin("*")
public class BookController {

    @Autowired
    private BookService bookService;

    @Autowired
    private AuthorService authorService;  // Author entity se Author ko fetch karne ke liye

    private final String UPLOAD_IMAGE_DIR ="uploads/images/";
    private final String UPLOAD_PDF_DIR = "uploads/pdfs/";

    @PostMapping(value = "/", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<?> addBook(
            @RequestPart("bookName") String bookName,
            @RequestPart("publishDate") String publishDate,
            @RequestPart("authorId") Integer authorId,
            @RequestPart("image") MultipartFile imageFile,
            @RequestPart("bookPdf") MultipartFile bookPdfFile
    ) {
        try {
            // Save Image
            String imageFileName = saveFile(imageFile, UPLOAD_IMAGE_DIR);

            // Save PDF
            String pdfFileName = saveFile(bookPdfFile, UPLOAD_PDF_DIR);

            // Find Author from database
            Author author = authorService.getAuthor(authorId);
            if (author == null) {
                return ResponseEntity.badRequest().body("Author not found with ID: " + authorId);
            }

            // Create new Book entity
            Book book = new Book();
            book.setBookName(bookName);
            book.setPublishDate(java.sql.Date.valueOf(publishDate)); // publishDate must be in format "yyyy-MM-dd"
            book.setImage(imageFileName);
            book.setBookPdf(pdfFileName);
            book.setAuthor(author);

            // Save Book to database
            Book savedBook = bookService.addBook(book);

            return ResponseEntity.ok(savedBook);

        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.internalServerError().body("Error while adding book: " + e.getMessage());
        }
    }

    private String saveFile(MultipartFile file, String uploadDir) throws IOException {
        if (file.isEmpty()) {
            throw new IOException("File is empty: " + file.getOriginalFilename());
        }

        // Clean file name
        String originalFileName = StringUtils.cleanPath(file.getOriginalFilename());
        String fileName = UUID.randomUUID().toString() + "_" + originalFileName;

        // Create directory if not exists
        Path uploadPath = Paths.get(uploadDir);
        if (!Files.exists(uploadPath)) {
            Files.createDirectories(uploadPath);
        }

        // Copy file
        Path filePath = uploadPath.resolve(fileName);
        Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

        return fileName;
    }

    // get book
    @GetMapping("/{bookId}")
    public ResponseEntity<Book> getBook(@PathVariable("bookId") Integer bookId) {
        return ResponseEntity.ok(this.bookService.getBook(bookId));
    }

    // get all books
    @GetMapping("/")
    public ResponseEntity<?> getAllBooks() {
        return ResponseEntity.ok(this.bookService.getAllBooks());
    }

    // update book (Simple Update without file upload)
    @PutMapping("/")
    public ResponseEntity<Book> updateBook(@RequestPart("book") Book book) {
        Book updatedBook = this.bookService.updateBook(book);
        return ResponseEntity.ok(updatedBook);
    }

    // delete book
    @DeleteMapping("/{bookId}")
    public ResponseEntity<?> deleteBook(@PathVariable("bookId") Integer bookId) {
        this.bookService.deleteBook(bookId);
        return ResponseEntity.ok("Book deleted successfully!");
    }
}
